const ethers = require("ethers");
const fs = require("fs");
require("dotenv").config();

async function main() {
  // rpc url- http://127.0.0.1:7545
  const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);
  // const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
  const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf-8");
  let wallet = new ethers.Wallet.fromEncryptedJsonSync(
    encryptedJson,
    process.env.PRIVATE_KEY_PASSWORD
  );
  wallet = await wallet.connect(provider);
  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf-8");
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf-8"
  );
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
  console.log("deploying your contract, please wait...");
  const contract = await contractFactory.deploy({
    gasLimit: 6721975,
  });
  const transactionReceipt = await contract.deployTransaction.wait(1);
  // console.log("here is the deployment transaction:");
  // console.log(contract.deployTransaction);
  // console.log("here is the transaction receipt:");
  // console.log(transactionReceipt);
  // console.log("let's deploy only with transaction data:");
  // const nonce = await wallet.getTransactionCount();
  // const tx = {
  //   nonce: nonce,
  //   gasPrice: "20000000000",
  //   gasLimit: "1000000",
  //   to: null,
  //   value: 0,
  //   data: "0x6080 60405234801561000f575f80fd5b506108f28061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c8063092a1820146100595780632e64cec11461008a5780636057361d146100a85780636f760f41146100c45780638bab8dd5146100e0575b5f80fd5b610073600480360381019061006e91906102cb565b610110565b60405161008192919061038f565b60405180910390f35b6100926101c5565b60405161009f91906103bd565b60405180910390f35b6100c260048036038101906100bd91906102cb565b6101cd565b005b6100de60048036038101906100d99190610502565b6101d6565b005b6100fa60048036038101906100f5919061055c565b61025a565b60405161010791906103bd565b60405180910390f35b6002818154811061011f575f80fd5b905f5260205f2090600202015f91509050805f015490806001018054610144906105d0565b80601f0160208091040260200160405190810160405280929190818152602001828054610170906105d0565b80156101bb5780601f10610192576101008083540402835291602001916101bb565b820191905f5260205f20905b81548152906001019060200180831161019e57829003601f168201915b5050505050905082565b5f8054905090565b805f8190555050565b6002604051806040016040528083815260200184815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f01556020820151816001019081610230919061079d565b5050508060018360405161024491906108a6565b9081526020016040518091039020819055505050565b6001818051602081018201805184825260208301602085012081835280955050505050505f915090505481565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b6102aa81610298565b81146102b4575f80fd5b50565b5f813590506102c5816102a1565b92915050565b5f602082840312156102e0576102df610290565b5b5f6102ed848285016102b7565b91505092915050565b6102ff81610298565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561033c578082015181840152602081019050610321565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61036182610305565b61036b818561030f565b935061037b81856020860161031f565b61038481610347565b840191505092915050565b5f6040820190506103a25f8301856102f6565b81810360208301526103b48184610357565b90509392505050565b5f6020820190506103d05f8301846102f6565b92915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61041482610347565b810181811067ffffffffffffffff82111715610433576104326103de565b5b80604052505050565b5f610445610287565b9050610451828261040b565b919050565b5f67ffffffffffffffff8211156104705761046f6103de565b5b61047982610347565b9050602081019050919050565b828183375f83830152505050565b5f6104a66104a184610456565b61043c565b9050828152602081018484840111156104c2576104c16103da565b5b6104cd848285610486565b509392505050565b5f82601f8301126104e9576104e86103d6565b5b81356104f9848260208601610494565b91505092915050565b5f806040838503121561051857610517610290565b5b5f83013567ffffffffffffffff81111561053557610534610294565b5b610541858286016104d5565b9250506020610552858286016102b7565b9150509250929050565b5f6020828403121561057157610570610290565b5b5f82013567ffffffffffffffff81111561058e5761058d610294565b5b61059a848285016104d5565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806105e757607f821691505b6020821081036105fa576105f96105a3565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261065c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610621565b6106668683610621565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6106a161069c61069784610298565b61067e565b610298565b9050919050565b5f819050919050565b6106ba83610687565b6106ce6106c6826106a8565b84845461062d565b825550505050565b5f90565b6106e26106d6565b6106ed8184846106b1565b505050565b5b81811015610710576107055f826106da565b6001810190506106f3565b5050565b601f8211156107555761072681610600565b61072f84610612565b8101602085101561073e578190505b61075261074a85610612565b8301826106f2565b50505b505050565b5f82821c905092915050565b5f6107755f198460080261075a565b1980831691505092915050565b5f61078d8383610766565b9150826002028217905092915050565b6107a682610305565b67ffffffffffffffff8111156107bf576107be6103de565b5b6107c982546105d0565b6107d4828285610714565b5f60209050601f831160018114610805575f84156107f3578287015190505b6107fd8582610782565b865550610864565b601f19841661081386610600565b5f5b8281101561083a57848901518255600182019150602085019450602081019050610815565b868310156108575784890151610853601f891682610766565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b5f61088082610305565b61088a818561086c565b935061089a81856020860161031f565b80840191505092915050565b5f6108b18284610876565b91508190509291505056fea2646970667358221220faafea2dcf2425b73397d735aa84cbcbb2d5c983dfd1ebcf8520b8cfc6fc6f0864736f6c63430008150033",
  //   chainId: 5777,
  // };
  // const sentTxResponse = await wallet.sendTransaction(tx);
  // await sentTxResponse.wait(1);
  // console.log(sentTxResponse);
  // get number from contract
  const currentFavoriteNumber = await contract.retrieve();
  console.log(currentFavoriteNumber);
}
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.log(error);
    process.exit(1);
  });
